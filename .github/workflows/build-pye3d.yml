# This is a basic workflow that is manually triggered

name: Build pye3d

on:
  pull_request:
  push:
    # branches: ["master", "ga-build"]
  workflow_dispatch:

env:
  opencv-download-url: "https://github.com/opencv/opencv/archive/4.2.0.zip"
  eigen-download-url: "https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.zip"

  opencv-install-dir: ${{ github.workspace }}/opencv-build
  eigen-install-dir: ${{ github.workspace }}/eigen-build

  opencv-install-dir-manylinux: /pye3d-deps/opencv  
  eigen-install-dir-manylinux: /pye3d-deps/eigen

  pye3d-test-input-download-url: "https://github.com/pupil-labs/pye3d-detector/wiki/files/pye3d_test_input.npz"

jobs:
  build_pye3d:
    name: "Build pye3d wheels on ${{ matrix.os }}"
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    continue-on-error: true
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Load OpenCV build cache (macOS / Windows)
        if: "!contains(runner.os, 'Linux')"
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.opencv-install-dir }}
          key: opencv-build-cache-${{ matrix.os }}-${{ env.opencv-download-url }}
      - name: Load OpenCV build cache (Linux)
        if: "contains(runner.os, 'Linux')"
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.opencv-install-dir-manylinux }}
          key: opencv-build-cache-${{ matrix.os }}-${{ env.opencv-download-url }}

      - name: Load eigen build cache (macOS / Windows)
        if: "!contains(runner.os, 'Linux')"
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.eigen-install-dir }}
          key: eigen-build-cache-${{ matrix.os }}-${{ env.eigen-download-url }}
      - name: Load eigen build cache (Linux)
        if: "contains(runner.os, 'Linux')"
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.eigen-install-dir-manylinux }}
          key: eigen-build-cache-${{ matrix.os }}-${{ env.eigen-download-url }}

      - name: Build wheels
        uses: pypa/cibuildwheel@v1.11.1.post1
        env:
          OpenCV_DIR: ${{ env.opencv-install-dir }}
          Eigen3_DIR: ${{ env.eigen-install-dir }}
          CIBW_ENVIRONMENT_LINUX: >
            OpenCV_DIR=/host${{ env.opencv-install-dir-manylinux }}
            Eigen3_DIR=/host${{ env.eigen-install-dir-manylinux }}

          CIBW_SKIP: "{cp,pp}27-* {cp,pp}35-* pp* *win32 *_aarch64 *_ppc64le *_s390x *_i686"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64"

          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}" # --add-path ${{ env.opencv-install-dir }};${{ env.eigen-install-dir }}"

          CIBW_TEST_REQUIRES: pytest opencv-python pandas scikit-image
          CIBW_TEST_COMMAND: >
            curl ${{ env.pye3d-test-input-download-url }}
            --output {package}/tests/integration/input/pye3d_test_input.npz --silent
            && pytest {package}/tests
          CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"

      - uses: actions/upload-artifact@v2
        with:
          name: distribution
          path: ./wheelhouse/*.whl
      # # UPLOAD TESTING OUTPUT
      # - name: "Prepare testing output on Unix"
      #   if: ${{ !contains(runner.os, 'windows') }}
      #   run: zip -qj pye3d-test-output-${{ matrix.os }}-${{ matrix.python-version }}.zip ./tests/integration/output/pye3d_test_*
      # - name: "Prepare testing output on Windows"
      #   if: ${{ contains(runner.os, 'windows') }}
      #   run: Compress-Archive -Path ./tests/integration/output/pye3d_test_* -DestinationPath pye3d-test-output-${{ matrix.os }}-${{ matrix.python-version }}.zip
      # - name: "Upload testing output"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: pye3d-test-output-${{ matrix.os }}-${{ matrix.python-version }}.zip
      #     path: ./pye3d-test-output-${{ matrix.os }}-${{ matrix.python-version }}.zip
      # ON FAILURE
      # - name: List intermediate files on failure
      #   if: ${{ failure() }}
      #   shell: bash
      #   run: ls -lR
      # - name: Upload logs on failure
      #   if: ${{ failure() }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: pye3d-build-log-${{ matrix.os }}-${{ matrix.python-version }}
      #     path: |
      #       ./_skbuild/
      #       ./dist/
      #       ./wheelhouse/
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.7
      - name: Build source package
        run: |
          pip install build
          python -m build --sdist .
      - name: Upload source package
        uses: actions/upload-artifact@v2
        with:
          name: distribution
          path: dist/
