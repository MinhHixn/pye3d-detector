# This is a basic workflow that is manually triggered

name: Build dependencies

on:
  schedule:
    # run every 6 days to keep cache alive
    - cron: "30 7 */6 * *"
  workflow_dispatch:
    inputs:
      should_invalidate_cache_download:
        description: "Fill to invalidate download cache"
        default: ""
        required: false
      should_invalidate_cache_build:
        description: "Fill to invalidate build cache"
        default: ""
        required: false

env:
  opencv-download-url: "https://github.com/opencv/opencv/archive/4.2.0.zip"
  opencv-install-dir: ${{ github.workspace }}/opencv-build

  eigen-download-url: "https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.zip"
  eigen-install-dir: ${{ github.workspace }}/eigen-build

jobs:
  # This workflow contains a single job called "greet"
  build_opencv:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Cache OpenCV source code download
        id: opencv-source-cache
        uses: actions/cache@v2.1.3
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: opencv.zip
          # An explicit key for restoring and saving the cache
          key: opencv-source-cache-${{ env.opencv-download-url }}
      - name: Download on Unix
        if: (github.event.inputs.should_invalidate_cache_download || steps.opencv-source-cache.outputs.cache-hit != 'true') && !contains(runner.os, 'windows')
        run: wget -q -O opencv.zip ${{ env.opencv-download-url }}
      - name: Download on Windows
        if: (github.event.inputs.should_invalidate_cache_download || steps.opencv-source-cache.outputs.cache-hit != 'true') && contains(runner.os, 'windows')
        run: Invoke-WebRequest ${{ env.opencv-download-url }} -OutFile opencv.zip
      - name: Cache OpenCV build
        id: opencv-build-cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.opencv-install-dir }}
          key: opencv-build-cache-${{ env.opencv-download-url }}
      - name: Prepare build
        shell: bash
        run: |
          unzip -q opencv.zip
          mv opencv-4.* opencv/
          mkdir opencv/build
      - name: Configure build
        if: github.event.inputs.should_invalidate_cache_build || steps.opencv-build-cache.outputs.cache-hit != 'true'
        shell: bash
        working-directory: opencv/build
        run: |
          cmake .. \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX="${{ env.opencv-install-dir }}" \
          -DBUILD_LIST="core,highgui,videoio,imgcodecs,imgproc,video" \
          -DBUILD_opencv_world=ON \
          -DBUILD_EXAMPLES=OFF \
          -DBUILD_DOCS=OFF \
          -DBUILD_PERF_TESTS=OFF \
          -DBUILD_TESTS=OFF \
          -DBUILD_opencv_java=OFF \
          -DBUILD_opencv_python=OFF \
          -DWITH_OPENMP=ON \
          -DWITH_IPP=ON \
          -DWITH_CSTRIPES=ON \
          -DWITH_OPENCL=ON \
          -DWITH_CUDA=OFF \
          -DWITH_TBB=OFF \
          -DWITH_MSMF=OFF
      - name: Compile on Windows
        if: runner.os == 'Windows' && (github.event.inputs.should_invalidate_cache_build || steps.opencv-build-cache.outputs.cache-hit != 'true')
        run: |
          cd opencv/build
          cmake --build . --target INSTALL --config Release --parallel
      - name: Compile on Unix
        if: runner.os != 'Windows' && (github.event.inputs.should_invalidate_cache_build || steps.opencv-build-cache.outputs.cache-hit != 'true')
        working-directory: opencv/build
        run: |
          make
          make install  # This workflow contains a single job called "greet"
      - name: Upload build as artifact
        uses: actions/upload-artifact@v2
        with:
          name: opencv-build-${{ matrix.os }}
          path: ${{ env.opencv-install-dir }}
  build_eigen:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    continue-on-error: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Cache Eigen source code download
        id: eigen-source-cache
        uses: actions/cache@v2.1.3
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
          path: eigen.zip
          # An explicit key for restoring and saving the cache
          key: eigen-source-cache-${{ env.eigen-download-url }}
      - name: Download on Unix
        if: (github.event.inputs.should_invalidate_cache_download || steps.eigen-source-cache.outputs.cache-hit != 'true') && !contains(runner.os, 'windows')
        run: wget -q -O eigen.zip ${{ env.eigen-download-url }}
      - name: Download on Windows
        if: (github.event.inputs.should_invalidate_cache_download || steps.eigen-source-cache.outputs.cache-hit != 'true') && contains(runner.os, 'windows')
        run: Invoke-WebRequest ${{ env.eigen-download-url }} -OutFile eigen.zip
      - name: Cache eigen build
        id: eigen-build-cache
        uses: actions/cache@v2.1.3
        with:
          path: ${{ env.eigen-install-dir }}
          key: eigen-build-cache-${{ env.eigen-download-url }}
      - name: Prepare build
        shell: bash
        run: |
          set -xe
          unzip -q eigen.zip
          mv eigen-3.* eigen/
          mkdir eigen/build
      - name: Configure build
        if: github.event.inputs.should_invalidate_cache_build || steps.eigen-build-cache.outputs.cache-hit != 'true'
        working-directory: eigen/build
        shell: bash
        run: cmake .. -DCMAKE_INSTALL_PREFIX="${{ env.eigen-install-dir }}"
      - name: Compile on Windows
        if: runner.os == 'Windows' && (github.event.inputs.should_invalidate_cache_build || steps.eigen-build-cache.outputs.cache-hit != 'true')
        working-directory: eigen/build
        run: cmake --build . --target INSTALL --config Release --parallel
      - name: Compile on Unix
        if: runner.os != 'Windows' && (github.event.inputs.should_invalidate_cache_build || steps.eigen-build-cache.outputs.cache-hit != 'true')
        working-directory: eigen/build
        run: |
          make
          make install
      - name: Upload build as artifact
        uses: actions/upload-artifact@v2
        with:
          name: eigen-build-${{ matrix.os }}
          path: ${{ env.eigen-install-dir }}
